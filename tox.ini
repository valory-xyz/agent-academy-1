; By default, testenvs are configured to:
; - don't skip dist (skipsdist = False)
; - don't skip the package installation (skip_install = False)
; - don't use source installation (usedevelop = False)
; where one of those steps is not necessary for the test,
; we set the associated flag (e.g. for linting we don't need
; the package installation).
[tox]
envlist = bandit, safety, black, black-check, isort, isort-check, fix-copyright, check-copyright, check-hash, check-packages, flake8, mypy, pylint, darglint, check-generate-all-protocols, abci-docstrings, check-abciapp-specs, py{3.7,3.8,3.9,3.10}-{win,linux,darwin}
; when running locally we don't want to fail for no good reason
skip_missing_interpreters = true

[testenv]
basepython = python3
whitelist_externals = /bin/sh
passenv = *
extras = all
deps =
    aiohttp==3.7.4.post0
    asn1crypto==1.5.1
    certifi==2021.10.8
    grpcio==1.43.0
    hypothesis==6.21.6
    pandas==1.3.5
    py-ecc==5.2.0
    py-eth-sig-utils==0.4.0
    pytz==2022.2.1
    tomte[tests]==0.2.4
    open-aea==1.31.0
    open-aea-ledger-ethereum==1.31.0
    open-aea-ledger-cosmos==1.31.0
    open-aea-cli-ipfs==1.31.0
    open-aea-test-autonomy==0.10.0.post2
    open-autonomy==0.10.0.post2
setenv =
    PYTHONHASHSEED=0
commands =
    autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    autonomy packages sync
    pytest -rfE --doctest-modules {env:PACKAGES_PATH} --cov=packages --cov-report=xml --cov-report=term --cov-report=term-missing --cov-config=.coveragerc {posargs}

[testenv:py3.7-linux]
basepython = python3.7
platform=^linux$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.8-linux]
basepython = python3.8
platform=^linux$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.9-linux]
basepython = python3.9
platform=^linux$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.10-linux]
basepython = python3.10
platform=^linux$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.7-win]
basepython = python3.7
platform=^win32$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.8-win]
basepython = python3.8
platform=^win32$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.9-win]
basepython = python3.9
platform=^win32$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.10-win]
basepython = python3.10
platform=^win32$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.7-darwin]
basepython = python3.7
platform=^darwin$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.8-darwin]
basepython = python3.8
platform=^darwin$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.9-darwin]
basepython = python3.9
platform=^darwin$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:py3.10-darwin]
basepython = python3.10
platform=^darwin$
usedevelop = True
deps =
    {[testenv]deps}
setenv =
    {[testenv]setenv}

[testenv:bandit]
skipsdist = True
skip_install = True
deps =
    tomte[bandit]==0.2.4
commands = bandit -s B101 -r packages
           bandit -s B101 -r scripts

[testenv:black]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.2.4
commands = black {env:PACKAGES_PATHS} scripts

[testenv:black-check]
skipsdist = True
skip_install = True
deps =
    tomte[black]==0.2.4
commands = black --check {env:PACKAGES_PATHS} scripts

[testenv:isort]
skipsdist = True
skip_install = True
deps = tomte[isort]==0.2.4
commands =
    isort {env:PACKAGES_PATHS} scripts

[testenv:isort-check]
skipsdist = True
skip_install = True
deps = tomte[isort]==0.2.4
commands =
    isort --check-only {env:PACKAGES_PATHS} scripts

[testenv:fix-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright.py

[testenv:check-copyright]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_copyright.py --check

[testenv:check-readme]
skipsdist = True
skip_install = True
deps =
commands = {toxinidir}/scripts/check_readme.py

[testenv:check-hash]
skipsdist = True
skip_install = True
deps =
    {[testenv]deps}
commands = python -m autonomy.cli packages lock --check {posargs}

[testenv:check-packages]
skipsdist = True
skip_install = True
deps = {[testenv]deps}
commands =
    autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    autonomy packages sync
    autonomy check-packages

[testenv:flake8]
skipsdist = True
skip_install = True
deps =
    tomte[flake8]==0.2.4
commands = flake8 {env:PACKAGES_PATHS} scripts

[testenv:mypy]
skipsdist = True
skip_install = True
deps =
    {[testenv]deps}
    tomte[mypy]==0.2.4
commands = autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
           autonomy packages sync
           mypy {env:PACKAGES_PATHS} scripts --disallow-untyped-defs

[testenv:pylint]
whitelist_externals = /bin/sh
skipsdist = True
deps =
    {[testenv]deps}
    tomte[pylint]==0.2.4
commands = pylint {env:PACKAGES_PATHS} scripts

[testenv:safety]
skipsdist = True
skip_install = True
deps =
    tomte[safety]==0.2.4
commands = safety check -i 37524 -i 38038 -i 37776 -i 38039 -i 39621 -i 40291 -i 39706 -i 41002 -i 51358 -i 51499

[testenv:darglint]
skipsdist = True
skip_install = True
deps =
    tomte[darglint]==0.2.4
commands = darglint scripts {env:PACKAGES_PATHS}

[testenv:check-generate-all-protocols]
skipsdist = True
usedevelop = True
deps =
    tomte[isort]==0.2.4
    tomte[black]==0.2.4
commands = aea generate-all-protocols --check-clean

[testenv:abci-docstrings]
skipsdist = True
usedevelop = True
commands = autonomy analyse fsm-specs

[testenv:check-abciapp-specs]
skipsdist = True
usedevelop = True
commands =
    autonomy init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    autonomy packages sync
    autonomy analyse fsm-specs

[testenv:check-doc-links-hashes]
skipsdist = True
skip_install = True
commands =
    aea init --reset --author ci --remote --ipfs --ipfs-node "/dns/registry.autonolas.tech/tcp/443/https"
    aea packages sync
    {toxinidir}/scripts/check_doc_links.py
    {toxinidir}/scripts/check_doc_ipfs_hashes.py

[testenv:fix-doc-hashes]
skipsdist = True
skip_install = True
commands =
    {toxinidir}/scripts/check_doc_ipfs_hashes.py --fix

[testenv:spell-check]
whitelist_externals = mdspell
skipsdist = True
usedevelop = True
deps =
commands =
    {toxinidir}/scripts/spell-check.sh

[testenv:liccheck]
skipsdist = True
usedevelop = True
deps =
    tomte[liccheck]==0.2.4
commands = {toxinidir}/scripts/freeze_dependencies.py -o {envtmpdir}/requirements.txt
           liccheck -s liccheck.ini -r {envtmpdir}/requirements.txt -l PARANOID

[flake8]
exclude=.md,
    *_pb2.py,
    *_pb2_grpc.py,
    custom_types.py,

max-line-length = 88
select = B,C,D,E,F,I,W,
ignore = E203,E501,W503,D202,B014,D400,D401,DAR
application-import-names = packages,tests,scripts

# ignore as too restrictive for our needs:
# D400: First line should end with a period
# D401: First line should be in imperative mood
# E501: https://www.flake8rules.com/rules/E501.html (Line too long)
# E203: https://www.flake8rules.com/rules/E203.html (Whitespace)
# W503: https://www.flake8rules.com/rules/W503.html (Line break)
# D202: blank lines
# B014: redundant exception

[isort]
# for black compatibility
multi_line_output=3
include_trailing_comma=True
force_grid_wrap=0
use_parentheses=True
ensure_newline_before_comments = True
line_length=88
# custom configurations
order_by_type=False
case_sensitive=True
lines_after_imports=2
skip=packages/valory/skills/abstract_round_abci/test_tools/integration.py,packages/valory/skills/transaction_settlement_abci/test_tools/integration.py,
skip_glob =
known_first_party=autonomy
known_packages=packages
known_local_folder=tests
sections=FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,PACKAGES,LOCALFOLDER

[mypy]
python_version = 3.8
strict_optional = True
exclude=(.*_pb2|.*custom_types)

# Before adding a module here, make sure it does not support type hints
# Per-module options for aea dir:

[mypy-packages.valory.*]
ignore_errors=True

[mypy-packages.open_aea.*]
ignore_errors=True

[mypy-aea_ledger_ethereum.*]
ignore_missing_imports=True

[mypy-ipfshttpclient.*]
ignore_missing_imports = True

[mypy-pytest]
ignore_missing_imports = True

[mypy-hypothesis.*]
ignore_missing_imports = True

[mypy-docker.*]
ignore_missing_imports = True

[mypy-certifi.*]
ignore_missing_imports = True

[mypy-pandas.*]
ignore_missing_imports = True

[mypy-aea_cli_ipfs.*]
ignore_missing_imports = True

[mypy-py_eth_sig_utils.*]
ignore_missing_imports = True

[mypy-yaml]
ignore_missing_imports=True

[mypy-aea.*]
ignore_missing_imports = True

[mypy-web3.*]
ignore_missing_imports = True

[mypy-requests]
ignore_missing_imports=True

[mypy-aea_test_autonomy.*]
ignore_missing_imports=True

[darglint]
docstring_style=sphinx
strictness=short
ignore_regex=async_act
ignore=DAR401

[pytest]
log_cli = 1
log_cli_level = DEBUG
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format=%Y-%m-%d %H:%M:%S
asyncio_mode=strict

markers =
    integration: marks integration tests which require other network services
    e2e: marks end-to-end agent tests

filterwarnings =
    ignore::DeprecationWarning:aea.*:
